

vec4 getCTValue(__table sampler colorTable, float index) {
	return unpremultiply(sample(colorTable, vec2(index, 0.0)));
}

kernel vec4 colorMappingFilterOne(sampler src, __table sampler colorTable, float min, float max) {

	vec4 pix;
	
	float value;
	

	pix = unpremultiply(sample(src, samplerCoord(src)));

	value = (pix.r + pix.g + pix.b) / 3.0;

//	pix = (value <= max - 0.5 ? (value > min ? getCTValue(colorTable, 255.0 * value + 255.0) : vec4(0.0, 0.0, 0.0, 0.0)) : vec4(0.0, 0.0, 0.0, 0.0));
//    pix = (value <= max ? (value > min + 0.5 ? getCTValue(colorTable, 255.0 * value) : pix) : pix);
    
    // for negative values
    pix = (value <= max - 0.5 ? (value > min ? getCTValue(colorTable, 255.0 * (value / 0.5) + 256.0) : vec4(0.0, 0.0, 0.0, 0.0)) : vec4(0.0, 0.0, 0.0, 0.0));
    // for positive values
    pix = (value <= max ? (value > min + 0.5 ? getCTValue(colorTable, 255.0 * ((value - 0.5) / 0.5)) : pix) : pix);
//    pix = getCTValue(colorTable, 128.0);
   // pix.a = 1.0;//(value <= min) ? 1.0 : -1.0;
    
	return premultiply(pix);
}



kernel vec4 colorMappingFilterTwo(sampler src, __table sampler colorTable, float min, float max) {
	
	vec4 pix;
	
	float value;
	

	pix = unpremultiply(sample(src, samplerCoord(src)));

	value = (pix.r + pix.g + pix.b) / 3.0;

	pix = (value < max ? (value > min ? getCTValue(colorTable, 255.0 / (max - min) * (value - min)) : getCTValue(colorTable, 0.0)) : getCTValue(colorTable, 255.0));

	pix.a = 1.0;

	return premultiply(pix);
}


	
kernel vec4 colorMappingFilterThree(sampler src, __table sampler colorTable, float min, float max) {
	
	vec4 pix;
	
	float value;
	

	pix = unpremultiply(sample(src, samplerCoord(src)));

	value = (pix.r + pix.g + pix.b) / 3.0;

	pix = (value < max ? (value > min ? getCTValue(colorTable, 255.0 / (max - min) * (value - min)) : vec4(0.0, 0.0, 0.0, 0.0)) : vec4(0.0, 0.0, 0.0, 0.0));

	pix.a = (value < max ? (value > min ? 1.0 : 0.0) : 0.0);

	return premultiply(pix);
}

// Support for 2 domains: (min, max) and (min2, max2)
// Behaviour: if pixel va
kernel vec4 colorMappingFilterFour(sampler src, __table sampler colorTable, 
                                   float min, float max, float min2, float max2) {
	
	vec4 pix;
	
	float value;
	

	pix = unpremultiply(sample(src, samplerCoord(src)));

	value = (pix.r + pix.g + pix.b) / 3.0;

	pix = (value < max2 ? (value > min2 ? getCTValue(colorTable, 255.0 / (max2 - min2) * (value - min2)) : vec4(0.0, 0.0, 0.0, 0.0)) : vec4(0.0, 0.0, 0.0, 0.0));
    
    pix = (value < max  ? (value > min  ? getCTValue(colorTable, 255.0 / (max  - min ) * (value - min )) : pix)                      : pix);

    pix.a = (value < max2 ? (value > min2 ? 1.0 : 0.0  ) : 0.0  );
	pix.a = (value < max  ? (value > min  ? 1.0 : pix.a) : pix.a);

	return premultiply(pix);
}
